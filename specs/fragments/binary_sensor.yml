# Auto-generated Openapi model from the following content:
# 
# availability:
#   description: A list of MQTT topics subscribed to receive availability (online/offline) updates. Must not be used together with `availability_topic`.
#   required: false
#   type: list
#   keys:
#     payload_available:
#       description: The payload that represents the available state.
#       required: false
#       type: string
#       default: online
#     payload_not_available:
#       description: The payload that represents the unavailable state.
#       required: false
#       type: string
#       default: offline
#     topic:
#       description: An MQTT topic subscribed to receive availability (online/offline) updates.
#       required: true
#       type: string
#     value_template:
#       description: "Defines a [template](/docs/configuration/templating/#using-templates-with-the-mqtt-integration) to extract device's availability from the `topic`. To determine the devices's availability result of this template will be compared to `payload_available` and `payload_not_available`."
#       required: false
#       type: template
# availability_mode:
#   description: When `availability` is configured, this controls the conditions needed to set the entity to `available`. Valid entries are `all`, `any`, and `latest`. If set to `all`, `payload_available` must be received on all configured availability topics before the entity is marked as online. If set to `any`, `payload_available` must be received on at least one configured availability topic before the entity is marked as online. If set to `latest`, the last `payload_available` or `payload_not_available` received on any configured availability topic controls the availability.
#   required: false
#   type: string
#   default: latest
# availability_template:
#   description: "Defines a [template](/docs/configuration/templating/#using-templates-with-the-mqtt-integration) to extract device's availability from the `availability_topic`. To determine the devices's availability result of this template will be compared to `payload_available` and `payload_not_available`."
#   required: false
#   type: template
# availability_topic:
#   description: "The MQTT topic subscribed to receive birth and LWT messages from the MQTT device. If `availability` is not defined, the binary sensor will always be considered `available` and its state will be `on`, `off` or `unknown`. If `availability` is defined, the binary sensor will be considered as `unavailable` by default and the sensor's initial state will be `unavailable`. Must not be used together with `availability`."
#   required: false
#   type: string
# device:
#   description: "Information about the device this binary sensor is a part of to tie it into the [device registry](https://developers.home-assistant.io/docs/device_registry_index/). Only works when [`unique_id`](#unique_id) is set. At least one of identifiers or connections must be present to identify the device."
#   required: false
#   type: map
#   keys:
#     configuration_url:
#       description: 'A link to the webpage that can manage the configuration of this device. Can be either an `http://`, `https://` or an internal `homeassistant://` URL.'
#       required: false
#       type: string
#     connections:
#       description: "A list of connections of the device to the outside world as a list of tuples `[connection_type, connection_identifier]`. For example the MAC address of a network interface: `'connections': ['mac', '02:5b:26:a8:dc:12']`."
#       required: false
#       type: [list, map]
#     hw_version:
#       description: The hardware version of the device.
#       required: false
#       type: string
#     identifiers:
#       description: A list of IDs that uniquely identify the device. For example a serial number.
#       required: false
#       type: [list, string]
#     manufacturer:
#       description: The manufacturer of the device.
#       required: false
#       type: string
#     model:
#       description: The model of the device.
#       required: false
#       type: string
#     name:
#       description: The name of the device.
#       required: false
#       type: string
#     suggested_area:
#       description: 'Suggest an area if the device isnâ€™t in one yet.'
#       required: false
#       type: string
#     sw_version:
#       description: The firmware version of the device.
#       required: false
#       type: string
#     via_device:
#       description: 'Identifier of a device that routes messages between this device and Home Assistant. Examples of such devices are hubs, or parent devices of a sub-device. This is used to show device topology in Home Assistant.'
#       required: false
#       type: string
# device_class:
#   description: Sets the [class of the device](/integrations/binary_sensor/#device-class), changing the device state and icon that is displayed on the frontend. The `device_class` can be `null`.
#   default: None
#   required: false
#   type: string
# enabled_by_default:
#   description: Flag which defines if the entity should be enabled when first added.
#   required: false
#   type: boolean
#   default: true
# encoding:
#   description: The encoding of the payloads received. Set to `""` to disable decoding of incoming payload.
#   required: false
#   type: string
#   default: "utf-8"
# entity_category:
#   description: The [category](https://developers.home-assistant.io/docs/core/entity/#generic-properties) of the entity.
#   required: false
#   type: string
#   default: None
# expire_after:
#   description: If set, it defines the number of seconds after the sensor's state expires, if it's not updated. After expiry, the sensor's state becomes `unavailable`. Default the sensors state never expires.
#   required: false
#   type: integer
# force_update:
#   description: Sends update events (which results in update of [state object](/docs/configuration/state_object/)'s `last_changed`) even if the sensor's state hasn't changed. Useful if you want to have meaningful value graphs in history or want to create an automation that triggers on *every* incoming state message (not only when the sensor's new state is different to the current one).
#   required: false
#   type: boolean
#   default: false
# icon:
#   description: "[Icon](/docs/configuration/customizing-devices/#icon) for the entity."
#   required: false
#   type: icon
# json_attributes_template:
#   description: "Defines a [template](/docs/configuration/templating/#using-templates-with-the-mqtt-integration) to extract the JSON dictionary from messages received on the `json_attributes_topic`. Usage example can be found in [MQTT sensor](/integrations/sensor.mqtt/#json-attributes-template-configuration) documentation."
#   required: false
#   type: template
# json_attributes_topic:
#   description: The MQTT topic subscribed to receive a JSON dictionary payload and then set as sensor attributes. Usage example can be found in [MQTT sensor](/integrations/sensor.mqtt/#json-attributes-topic-configuration) documentation.
#   required: false
#   type: string
# name:
#   description: The name of the binary sensor. Can be set to `null` if only the device name is relevant.
#   required: false
#   type: string
#   default: MQTT Binary Sensor
# object_id:
#   description: Used instead of `name` for automatic generation of `entity_id`
#   required: false
#   type: string
# off_delay:
#   description: "For sensors that only send `on` state updates (like PIRs), this variable sets a delay in seconds after which the sensor's state will be updated back to `off`."
#   required: false
#   type: integer
# payload_available:
#   description: The string that represents the `online` state.
#   required: false
#   type: string
#   default: online
# payload_not_available:
#   description: The string that represents the `offline` state.
#   required: false
#   type: string
#   default: offline
# payload_off:
#   description: The string that represents the `off` state. It will be compared to the message in the `state_topic` (see `value_template` for details)
#   required: false
#   type: string
#   default: "OFF"
# payload_on:
#   description: The string that represents the `on` state. It will be compared to the message in the `state_topic` (see `value_template` for details)
#   required: false
#   type: string
#   default: "ON"
# qos:
#   description: The maximum QoS level to be used when receiving and publishing messages.
#   required: false
#   type: integer
#   default: 0
# state_topic:
#   description: The MQTT topic subscribed to receive sensor's state.
#   required: true
#   type: string
# unique_id:
#   description: An ID that uniquely identifies this sensor. If two sensors have the same unique ID, Home Assistant will raise an exception.
#   required: false
#   type: string
# value_template:
#   description: "Defines a [template](/docs/configuration/templating/#using-templates-with-the-mqtt-integration) that returns a string to be compared to `payload_on`/`payload_off` or an empty string, in which case the MQTT message will be removed. Remove this option when `payload_on` and `payload_off` are sufficient to match your payloads (i.e no pre-processing of original message is required)."
#   required: false
#   type: template
# 

type: object
description: >-
  Binary sensors are similar to other [sensors](/integrations/sensor) in that
  they
required:
  - state_topic
properties:
  availability:
    description: >-
      A list of MQTT topics subscribed to receive availability (online/offline)
      updates. Must not be used together with `availability_topic`.
    type: array
    items:
      payload_available:
        description: 'The payload that represents the available state. (Default: online)'
        type: string
      payload_not_available:
        description: 'The payload that represents the unavailable state. (Default: offline)'
        type: string
      topic:
        description: >-
          An MQTT topic subscribed to receive availability (online/offline)
          updates.
        type: string
      value_template:
        description: >-
          Defines a
          [template](/docs/configuration/templating/#using-templates-with-the-mqtt-integration)
          to extract device's availability from the `topic`. To determine the
          devices's availability result of this template will be compared to
          `payload_available` and `payload_not_available`.
        type: string
  availability_mode:
    description: >-
      When `availability` is configured, this controls the conditions needed to
      set the entity to `available`. Valid entries are `all`, `any`, and
      `latest`. If set to `all`, `payload_available` must be received on all
      configured availability topics before the entity is marked as online. If
      set to `any`, `payload_available` must be received on at least one
      configured availability topic before the entity is marked as online. If
      set to `latest`, the last `payload_available` or `payload_not_available`
      received on any configured availability topic controls the availability.
      (Default: latest)
    type: string
  availability_template:
    description: >-
      Defines a
      [template](/docs/configuration/templating/#using-templates-with-the-mqtt-integration)
      to extract device's availability from the `availability_topic`. To
      determine the devices's availability result of this template will be
      compared to `payload_available` and `payload_not_available`.
    type: string
  availability_topic:
    description: >-
      The MQTT topic subscribed to receive birth and LWT messages from the MQTT
      device. If `availability` is not defined, the binary sensor will always be
      considered `available` and its state will be `on`, `off` or `unknown`. If
      `availability` is defined, the binary sensor will be considered as
      `unavailable` by default and the sensor's initial state will be
      `unavailable`. Must not be used together with `availability`.
    type: string
  device:
    type: object
    description: >-
      Information about the device this binary sensor is a part of to tie it
      into the [device
      registry](https://developers.home-assistant.io/docs/device_registry_index/).
      Only works when [`unique_id`](#unique_id) is set. At least one of
      identifiers or connections must be present to identify the device.
    required: []
    properties:
      configuration_url:
        description: >-
          A link to the webpage that can manage the configuration of this
          device. Can be either an `http://`, `https://` or an internal
          `homeassistant://` URL.
        type: string
      hw_version:
        description: The hardware version of the device.
        type: string
      manufacturer:
        description: The manufacturer of the device.
        type: string
      model:
        description: The model of the device.
        type: string
      name:
        description: The name of the device.
        type: string
      suggested_area:
        description: Suggest an area if the device isnâ€™t in one yet.
        type: string
      sw_version:
        description: The firmware version of the device.
        type: string
      via_device:
        description: >-
          Identifier of a device that routes messages between this device and
          Home Assistant. Examples of such devices are hubs, or parent devices
          of a sub-device. This is used to show device topology in Home
          Assistant.
        type: string
  device_class:
    description: >-
      Sets the [class of the device](/integrations/binary_sensor/#device-class),
      changing the device state and icon that is displayed on the frontend. The
      `device_class` can be `null`. (Default: None)
    type: string
  enabled_by_default:
    description: >-
      Flag which defines if the entity should be enabled when first added.
      (Default: true)
    type: string
  encoding:
    description: >-
      The encoding of the payloads received. Set to `""` to disable decoding of
      incoming payload. (Default: utf-8)
    type: string
  entity_category:
    description: >-
      The
      [category](https://developers.home-assistant.io/docs/core/entity/#generic-properties)
      of the entity. (Default: None)
    type: string
  expire_after:
    description: >-
      If set, it defines the number of seconds after the sensor's state expires,
      if it's not updated. After expiry, the sensor's state becomes
      `unavailable`. Default the sensors state never expires.
    type: string
  force_update:
    description: >-
      Sends update events (which results in update of [state
      object](/docs/configuration/state_object/)'s `last_changed`) even if the
      sensor's state hasn't changed. Useful if you want to have meaningful value
      graphs in history or want to create an automation that triggers on *every*
      incoming state message (not only when the sensor's new state is different
      to the current one).
    type: string
  json_attributes_template:
    description: >-
      Defines a
      [template](/docs/configuration/templating/#using-templates-with-the-mqtt-integration)
      to extract the JSON dictionary from messages received on the
      `json_attributes_topic`. Usage example can be found in [MQTT
      sensor](/integrations/sensor.mqtt/#json-attributes-template-configuration)
      documentation.
    type: string
  json_attributes_topic:
    description: >-
      The MQTT topic subscribed to receive a JSON dictionary payload and then
      set as sensor attributes. Usage example can be found in [MQTT
      sensor](/integrations/sensor.mqtt/#json-attributes-topic-configuration)
      documentation.
    type: string
  name:
    description: >-
      The name of the binary sensor. Can be set to `null` if only the device
      name is relevant. (Default: MQTT Binary Sensor)
    type: string
  object_id:
    description: Used instead of `name` for automatic generation of `entity_id`
    type: string
  off_delay:
    description: >-
      For sensors that only send `on` state updates (like PIRs), this variable
      sets a delay in seconds after which the sensor's state will be updated
      back to `off`.
    type: string
  payload_available:
    description: 'The string that represents the `online` state. (Default: online)'
    type: string
  payload_not_available:
    description: 'The string that represents the `offline` state. (Default: offline)'
    type: string
  payload_off:
    description: >-
      The string that represents the `off` state. It will be compared to the
      message in the `state_topic` (see `value_template` for details) (Default:
      OFF)
    type: string
  payload_on:
    description: >-
      The string that represents the `on` state. It will be compared to the
      message in the `state_topic` (see `value_template` for details) (Default:
      ON)
    type: string
  qos:
    description: The maximum QoS level to be used when receiving and publishing messages.
    type: string
  state_topic:
    description: The MQTT topic subscribed to receive sensor's state.
    type: string
  unique_id:
    description: >-
      An ID that uniquely identifies this sensor. If two sensors have the same
      unique ID, Home Assistant will raise an exception.
    type: string
  value_template:
    description: >-
      Defines a
      [template](/docs/configuration/templating/#using-templates-with-the-mqtt-integration)
      that returns a string to be compared to `payload_on`/`payload_off` or an
      empty string, in which case the MQTT message will be removed. Remove this
      option when `payload_on` and `payload_off` are sufficient to match your
      payloads (i.e no pre-processing of original message is required).
    type: string
