# Auto-generated Openapi model from the following content:
# 
# availability:
#   description: A list of MQTT topics subscribed to receive availability (online/offline) updates. Must not be used together with `availability_topic`.
#   required: false
#   type: list
#   keys:
#     payload_available:
#       description: The payload that represents the available state.
#       required: false
#       type: string
#       default: online
#     payload_not_available:
#       description: The payload that represents the unavailable state.
#       required: false
#       type: string
#       default: offline
#     topic:
#       description: An MQTT topic subscribed to receive availability (online/offline) updates.
#       required: true
#       type: string
#     value_template:
#       description: "Defines a [template](/docs/configuration/templating/#using-templates-with-the-mqtt-integration) to extract device's availability from the `topic`. To determine the devices's availability result of this template will be compared to `payload_available` and `payload_not_available`."
#       required: false
#       type: template
# availability_mode:
#   description: When `availability` is configured, this controls the conditions needed to set the entity to `available`. Valid entries are `all`, `any`, and `latest`. If set to `all`, `payload_available` must be received on all configured availability topics before the entity is marked as online. If set to `any`, `payload_available` must be received on at least one configured availability topic before the entity is marked as online. If set to `latest`, the last `payload_available` or `payload_not_available` received on any configured availability topic controls the availability.
#   required: false
#   type: string
#   default: latest
# availability_template:
#   description: "Defines a [template](/docs/configuration/templating/#using-templates-with-the-mqtt-integration) to extract device's availability from the `availability_topic`. To determine the devices's availability result of this template will be compared to `payload_available` and `payload_not_available`."
#   required: false
#   type: template
# availability_topic:
#   description: The MQTT topic subscribed to receive availability (online/offline) updates. Must not be used together with `availability`.
#   required: false
#   type: string
# command_topic:
#   description: The MQTT topic to publish commands to control the vacuum.
#   required: false
#   type: string
# device:
#   description: "Information about the device this switch is a part of to tie it into the [device registry](https://developers.home-assistant.io/docs/en/device_registry_index.html). Only works when [`unique_id`](#unique_id) is set. At least one of identifiers or connections must be present to identify the device."
#   required: false
#   type: map
#   keys:
#     configuration_url:
#       description: 'A link to the webpage that can manage the configuration of this device. Can be either an `http://`, `https://` or an internal `homeassistant://` URL.'
#       required: false
#       type: string
#     connections:
#       description: 'A list of connections of the device to the outside world as a list of tuples `[connection_type, connection_identifier]`. For example the MAC address of a network interface: `"connections": [["mac", "02:5b:26:a8:dc:12"]]`.'
#       required: false
#       type: list
#     hw_version:
#       description: The hardware version of the device.
#       required: false
#       type: string
#     identifiers:
#       description: A list of IDs that uniquely identify the device. For example a serial number.
#       required: false
#       type: [string, list]
#     manufacturer:
#       description: The manufacturer of the device.
#       required: false
#       type: string
#     model:
#       description: The model of the device.
#       required: false
#       type: string
#     name:
#       description: The name of the device.
#       required: false
#       type: string
#     suggested_area:
#       description: 'Suggest an area if the device isnâ€™t in one yet.'
#       required: false
#       type: string
#     sw_version:
#       description: The firmware version of the device.
#       required: false
#       type: string
#     via_device:
#       description: 'Identifier of a device that routes messages between this device and Home Assistant. Examples of such devices are hubs, or parent devices of a sub-device. This is used to show device topology in Home Assistant.'
#       required: false
#       type: string
# encoding:
#   description: The encoding of the payloads received and published messages. Set to `""` to disable decoding of incoming payload.
#   required: false
#   type: string
#   default: "utf-8"
# fan_speed_list:
#   description: List of possible fan speeds for the vacuum.
#   required: false
#   type: [string, list]
# json_attributes_template:
#   description: "Defines a [template](/docs/configuration/templating/#using-templates-with-the-mqtt-integration) to extract the JSON dictionary from messages received on the `json_attributes_topic`. Usage example can be found in [MQTT sensor](/integrations/sensor.mqtt/#json-attributes-template-configuration) documentation."
#   required: false
#   type: template
# json_attributes_topic:
#   description: The MQTT topic subscribed to receive a JSON dictionary payload and then set as sensor attributes. Usage example can be found in [MQTT sensor](/integrations/sensor.mqtt/#json-attributes-topic-configuration) documentation.
#   required: false
#   type: string
# name:
#   description: The name of the vacuum. Can be set to `null` if only the device name is relevant.
#   required: false
#   type: string
#   default: MQTT Vacuum
# object_id:
#   description: Used instead of `name` for automatic generation of `entity_id`
#   required: false
#   type: string
# payload_available:
#   description: The payload that represents the available state.
#   required: false
#   type: string
#   default: online
# payload_clean_spot:
#   description: The payload to send to the `command_topic` to begin a spot cleaning cycle.
#   required: false
#   type: string
#   default: clean_spot
# payload_locate:
#   description: The payload to send to the `command_topic` to locate the vacuum (typically plays a song).
#   required: false
#   type: string
#   default: locate
# payload_not_available:
#   description: The payload that represents the unavailable state.
#   required: false
#   type: string
#   default: offline
# payload_pause:
#   description: The payload to send to the `command_topic` to pause the vacuum.
#   required: false
#   type: string
#   default: pause
# payload_return_to_base:
#   description: The payload to send to the `command_topic` to tell the vacuum to return to base.
#   required: false
#   type: string
#   default: return_to_base
# payload_start:
#   description: "The payload to send to the `command_topic` to begin the cleaning cycle."
#   required: false
#   type: string
#   default: start
# payload_stop:
#   description: "The payload to send to the `command_topic` to stop cleaning."
#   required: false
#   type: string
#   default: stop
# qos:
#   description: The maximum QoS level to be used when receiving and publishing messages.
#   required: false
#   type: integer
#   default: 0
# retain:
#   description: If the published message should have the retain flag on or not.
#   required: false
#   type: boolean
#   default: false
# schema:
#   description: The schema to use. Must be `state`.
#   required: false
#   type: string
#   default: legacy
# send_command_topic:
#   description: The MQTT topic to publish custom commands to the vacuum.
#   required: false
#   type: string
# set_fan_speed_topic:
#   description: The MQTT topic to publish commands to control the vacuum's fan speed.
#   required: false
#   type: string
# state_topic:
#   description: "The MQTT topic subscribed to receive state messages from the vacuum. Messages received on the `state_topic` must be a valid JSON dictionary, with a mandatory `state` key and optionally `battery_level` and `fan_speed` keys as shown in the [example](#state-mqtt-protocol)."
#   required: false
#   type: string
# supported_features:
#   description: "List of features that the vacuum supports (possible values are `start`, `stop`, `pause`, `return_home`, `battery`, `status`, `locate`, `clean_spot`, `fan_speed`, `send_command`)."
#   required: false
#   type: [string, list]
#   default: "`start`, `stop`, `return_home`, `status`, `battery`, `clean_spot`"
# unique_id:
#    description: An ID that uniquely identifies this vacuum. If two vacuums have the same unique ID, Home Assistant will raise an exception.
#    required: false
#    type: string
# 

type: object
description: >-
  The `vacuum` integration enables the ability to control home cleaning robots
  within Home Assistant.
required: []
properties:
  availability:
    description: >-
      A list of MQTT topics subscribed to receive availability (online/offline)
      updates. Must not be used together with `availability_topic`.
    type: array
    items:
      payload_available:
        description: 'The payload that represents the available state. (Default: online)'
        type: string
      payload_not_available:
        description: 'The payload that represents the unavailable state. (Default: offline)'
        type: string
      topic:
        description: >-
          An MQTT topic subscribed to receive availability (online/offline)
          updates.
        type: string
      value_template:
        description: >-
          Defines a
          [template](/docs/configuration/templating/#using-templates-with-the-mqtt-integration)
          to extract device's availability from the `topic`. To determine the
          devices's availability result of this template will be compared to
          `payload_available` and `payload_not_available`.
        type: string
  availability_mode:
    description: >-
      When `availability` is configured, this controls the conditions needed to
      set the entity to `available`. Valid entries are `all`, `any`, and
      `latest`. If set to `all`, `payload_available` must be received on all
      configured availability topics before the entity is marked as online. If
      set to `any`, `payload_available` must be received on at least one
      configured availability topic before the entity is marked as online. If
      set to `latest`, the last `payload_available` or `payload_not_available`
      received on any configured availability topic controls the availability.
      (Default: latest)
    type: string
  availability_template:
    description: >-
      Defines a
      [template](/docs/configuration/templating/#using-templates-with-the-mqtt-integration)
      to extract device's availability from the `availability_topic`. To
      determine the devices's availability result of this template will be
      compared to `payload_available` and `payload_not_available`.
    type: string
  availability_topic:
    description: >-
      The MQTT topic subscribed to receive availability (online/offline)
      updates. Must not be used together with `availability`.
    type: string
  command_topic:
    description: The MQTT topic to publish commands to control the vacuum.
    type: string
  device:
    type: object
    description: >-
      Information about the device this switch is a part of to tie it into the
      [device
      registry](https://developers.home-assistant.io/docs/en/device_registry_index.html).
      Only works when [`unique_id`](#unique_id) is set. At least one of
      identifiers or connections must be present to identify the device.
    required: []
    properties:
      configuration_url:
        description: >-
          A link to the webpage that can manage the configuration of this
          device. Can be either an `http://`, `https://` or an internal
          `homeassistant://` URL.
        type: string
      connections:
        description: >-
          A list of connections of the device to the outside world as a list of
          tuples `[connection_type, connection_identifier]`. For example the MAC
          address of a network interface: `"connections": [["mac",
          "02:5b:26:a8:dc:12"]]`.
        type: array
        items:
          type: string
      hw_version:
        description: The hardware version of the device.
        type: string
      manufacturer:
        description: The manufacturer of the device.
        type: string
      model:
        description: The model of the device.
        type: string
      name:
        description: The name of the device.
        type: string
      suggested_area:
        description: Suggest an area if the device isnâ€™t in one yet.
        type: string
      sw_version:
        description: The firmware version of the device.
        type: string
      via_device:
        description: >-
          Identifier of a device that routes messages between this device and
          Home Assistant. Examples of such devices are hubs, or parent devices
          of a sub-device. This is used to show device topology in Home
          Assistant.
        type: string
  encoding:
    description: >-
      The encoding of the payloads received and published messages. Set to `""`
      to disable decoding of incoming payload. (Default: utf-8)
    type: string
  json_attributes_template:
    description: >-
      Defines a
      [template](/docs/configuration/templating/#using-templates-with-the-mqtt-integration)
      to extract the JSON dictionary from messages received on the
      `json_attributes_topic`. Usage example can be found in [MQTT
      sensor](/integrations/sensor.mqtt/#json-attributes-template-configuration)
      documentation.
    type: string
  json_attributes_topic:
    description: >-
      The MQTT topic subscribed to receive a JSON dictionary payload and then
      set as sensor attributes. Usage example can be found in [MQTT
      sensor](/integrations/sensor.mqtt/#json-attributes-topic-configuration)
      documentation.
    type: string
  name:
    description: >-
      The name of the vacuum. Can be set to `null` if only the device name is
      relevant. (Default: MQTT Vacuum)
    type: string
  object_id:
    description: Used instead of `name` for automatic generation of `entity_id`
    type: string
  payload_available:
    description: 'The payload that represents the available state. (Default: online)'
    type: string
  payload_clean_spot:
    description: >-
      The payload to send to the `command_topic` to begin a spot cleaning cycle.
      (Default: clean_spot)
    type: string
  payload_locate:
    description: >-
      The payload to send to the `command_topic` to locate the vacuum (typically
      plays a song). (Default: locate)
    type: string
  payload_not_available:
    description: 'The payload that represents the unavailable state. (Default: offline)'
    type: string
  payload_pause:
    description: >-
      The payload to send to the `command_topic` to pause the vacuum. (Default:
      pause)
    type: string
  payload_return_to_base:
    description: >-
      The payload to send to the `command_topic` to tell the vacuum to return to
      base. (Default: return_to_base)
    type: string
  payload_start:
    description: >-
      The payload to send to the `command_topic` to begin the cleaning cycle.
      (Default: start)
    type: string
  payload_stop:
    description: >-
      The payload to send to the `command_topic` to stop cleaning. (Default:
      stop)
    type: string
  qos:
    description: The maximum QoS level to be used when receiving and publishing messages.
    type: string
  retain:
    description: If the published message should have the retain flag on or not.
    type: string
  schema:
    description: 'The schema to use. Must be `state`. (Default: legacy)'
    type: string
  send_command_topic:
    description: The MQTT topic to publish custom commands to the vacuum.
    type: string
  set_fan_speed_topic:
    description: The MQTT topic to publish commands to control the vacuum's fan speed.
    type: string
  state_topic:
    description: >-
      The MQTT topic subscribed to receive state messages from the vacuum.
      Messages received on the `state_topic` must be a valid JSON dictionary,
      with a mandatory `state` key and optionally `battery_level` and
      `fan_speed` keys as shown in the [example](#state-mqtt-protocol).
    type: string
  unique_id:
    description: >-
      An ID that uniquely identifies this vacuum. If two vacuums have the same
      unique ID, Home Assistant will raise an exception.
    type: string
