/*
 * Data structures for Home Assistant MQTT discovery
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct LawnMower {
    /// The MQTT topic subscribed to receive an update of the activity. Valid activities are `mowing`, `paused`, `docked`, and `error`. Use `value_template` to extract the activity state from a custom payload. When payload `none` is received, the activity state will be reset to `unknown`.
    #[serde(rename = "activity_state_topic", skip_serializing_if = "Option::is_none")]
    pub activity_state_topic: Option<String>,
    /// Defines a [template](/docs/configuration/templating/#using-templates-with-the-mqtt-integration) to extract the value.
    #[serde(rename = "activity_value_template", skip_serializing_if = "Option::is_none")]
    pub activity_value_template: Option<String>,
    /// A list of MQTT topics subscribed to receive availability (online/offline) updates. Must not be used together with `availability_topic`.
    #[serde(rename = "availability", skip_serializing_if = "Option::is_none")]
    pub availability: Option<Vec<crate::models::LawnMowerAvailabilityInner>>,
    /// The MQTT topic subscribed to receive availability (online/offline) updates. Must not be used together with `availability`.
    #[serde(rename = "availability_topic", skip_serializing_if = "Option::is_none")]
    pub availability_topic: Option<String>,
    /// When `availability` is configured, this controls the conditions needed to set the entity to `available`. Valid entries are `all`, `any`, and `latest`. If set to `all`, `payload_available` must be received on all configured availability topics before the entity is marked as online. If set to `any`, `payload_available` must be received on at least one configured availability topic before the entity is marked as online. If set to `latest`, the last `payload_available` or `payload_not_available` received on any configured availability topic controls the availability. (Default: `latest)`
    #[serde(rename = "availability_mode", skip_serializing_if = "Option::is_none")]
    pub availability_mode: Option<String>,
    /// Defines a [template](/docs/configuration/templating/#using-templates-with-the-mqtt-integration) to extract device's availability from the `availability_topic`. To determine the devices's availability, the result of this template will be compared to `payload_available` and `payload_not_available`.
    #[serde(rename = "availability_template", skip_serializing_if = "Option::is_none")]
    pub availability_template: Option<String>,
    #[serde(rename = "device", skip_serializing_if = "Option::is_none")]
    pub device: Option<Box<crate::models::LawnMowerDevice>>,
    /// Defines a [template](/docs/configuration/templating/#using-templates-with-the-mqtt-integration) to generate the payload to send to `dock_command_topic`. The `value` parameter in the template will be set to `dock`.
    #[serde(rename = "dock_command_template", skip_serializing_if = "Option::is_none")]
    pub dock_command_template: Option<String>,
    /// The MQTT topic that publishes commands when the service `lawn_mower.dock` service call is executed. The value `dock` is published when the service is called. Use a `dock_command_template` to publish a custom format.
    #[serde(rename = "dock_command_topic", skip_serializing_if = "Option::is_none")]
    pub dock_command_topic: Option<String>,
    /// Flag which defines if the entity should be enabled when first added. (Default: `true)`
    #[serde(rename = "enabled_by_default", skip_serializing_if = "Option::is_none")]
    pub enabled_by_default: Option<bool>,
    /// The encoding of the payloads received and published messages. Set to `\"\"` to disable decoding of the incoming payload. (Default: `utf-8)`
    #[serde(rename = "encoding", skip_serializing_if = "Option::is_none")]
    pub encoding: Option<String>,
    /// The [category](https://developers.home-assistant.io/docs/core/entity#generic-properties) of the entity. (Default: `None)`
    #[serde(rename = "entity_category", skip_serializing_if = "Option::is_none")]
    pub entity_category: Option<String>,
    /// Defines a [template](/docs/configuration/templating/#using-templates-with-the-mqtt-integration) to extract the JSON dictionary from messages received on the `json_attributes_topic`.
    #[serde(rename = "json_attributes_template", skip_serializing_if = "Option::is_none")]
    pub json_attributes_template: Option<String>,
    /// The MQTT topic subscribed to receive a JSON dictionary payload and then set as entity attributes. Implies `force_update` of the current activity state when a message is received on this topic.
    #[serde(rename = "json_attributes_topic", skip_serializing_if = "Option::is_none")]
    pub json_attributes_topic: Option<String>,
    /// The name of the lawn mower. Can be set to `null` if only the device name is relevant.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Used instead of `name` for automatic generation of `entity_id`
    #[serde(rename = "object_id", skip_serializing_if = "Option::is_none")]
    pub object_id: Option<String>,
    /// Flag that defines if the lawn mower works in optimistic mode. (Default: ``true` if no `activity_state_topic` defined, else `false`.)`
    #[serde(rename = "optimistic", skip_serializing_if = "Option::is_none")]
    pub optimistic: Option<bool>,
    /// Defines a [template](/docs/configuration/templating/#using-templates-with-the-mqtt-integration) to generate the payload to send to `pause_command_topic`. The `value` parameter in the template will be set to `pause`.
    #[serde(rename = "pause_command_template", skip_serializing_if = "Option::is_none")]
    pub pause_command_template: Option<String>,
    /// The MQTT topic that publishes commands when the service `lawn_mower.pause` service call is executed. The value `pause` is published when the service is called. Use a `pause_command_template` to publish a custom format.
    #[serde(rename = "pause_command_topic", skip_serializing_if = "Option::is_none")]
    pub pause_command_topic: Option<String>,
    /// The maximum QoS level to be used when receiving and publishing messages.
    #[serde(rename = "qos", skip_serializing_if = "Option::is_none")]
    pub qos: Option<i32>,
    /// Defines a [template](/docs/configuration/templating/#using-templates-with-the-mqtt-integration) to generate the payload to send to `dock_command_topic`. The `value` parameter in the template will be set to `dock`.
    #[serde(rename = "start_mowing_template", skip_serializing_if = "Option::is_none")]
    pub start_mowing_template: Option<String>,
    /// The MQTT topic that publishes commands when the service `lawn_mower.start_mowing` service call is executed. The value `start_mowing` is published when the service is called. Use a `start_mowing_command_template` to publish a custom format.
    #[serde(rename = "start_mowing_command_topic", skip_serializing_if = "Option::is_none")]
    pub start_mowing_command_topic: Option<String>,
    /// If the published message should have the retain flag on or not.
    #[serde(rename = "retain", skip_serializing_if = "Option::is_none")]
    pub retain: Option<bool>,
    /// An ID that uniquely identifies this lawn mower. If two lawn mowers have the same unique ID, Home Assistant will raise an exception.
    #[serde(rename = "unique_id", skip_serializing_if = "Option::is_none")]
    pub unique_id: Option<String>,
}

impl LawnMower {
    pub fn new() -> LawnMower {
        LawnMower {
            activity_state_topic: None,
            activity_value_template: None,
            availability: None,
            availability_topic: None,
            availability_mode: None,
            availability_template: None,
            device: None,
            dock_command_template: None,
            dock_command_topic: None,
            enabled_by_default: None,
            encoding: None,
            entity_category: None,
            json_attributes_template: None,
            json_attributes_topic: None,
            name: None,
            object_id: None,
            optimistic: None,
            pause_command_template: None,
            pause_command_topic: None,
            qos: None,
            start_mowing_template: None,
            start_mowing_command_topic: None,
            retain: None,
            unique_id: None,
        }
    }
}


