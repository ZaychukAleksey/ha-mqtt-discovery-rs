/*
 * Data structures for Home Assistant MQTT discovery
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Sensor {
    #[serde(rename = "device", skip_serializing_if = "Option::is_none")]
    pub device: Option<Box<crate::models::Device>>,
    /// The [type/class](/integrations/sensor/#device-class) of the sensor to set the icon in the frontend. The `device_class` can be `null`. (Default: None)
    #[serde(rename = "device_class", skip_serializing_if = "Option::is_none")]
    pub device_class: Option<String>,
    /// Flag which defines if the entity should be enabled when first added. (Default: true)
    #[serde(rename = "enabled_by_default", skip_serializing_if = "Option::is_none")]
    pub enabled_by_default: Option<String>,
    /// The encoding of the payloads received. Set to `\"\"` to disable decoding of incoming payload. (Default: utf-8)
    #[serde(rename = "encoding", skip_serializing_if = "Option::is_none")]
    pub encoding: Option<String>,
    /// The [category](https://developers.home-assistant.io/docs/core/entity#generic-properties) of the entity. (Default: None)
    #[serde(rename = "entity_category", skip_serializing_if = "Option::is_none")]
    pub entity_category: Option<String>,
    /// If set, it defines the number of seconds after the sensor's state expires, if it's not updated. After expiry, the sensor's state becomes `unavailable`. Default the sensors state never expires.
    #[serde(rename = "expire_after", skip_serializing_if = "Option::is_none")]
    pub expire_after: Option<String>,
    /// Sends update events even if the value hasn't changed. Useful if you want to have meaningful value graphs in history.
    #[serde(rename = "force_update", skip_serializing_if = "Option::is_none")]
    pub force_update: Option<String>,
    /// Defines a [template](/docs/configuration/templating/#using-templates-with-the-mqtt-integration) to extract the JSON dictionary from messages received on the `json_attributes_topic`.
    #[serde(rename = "json_attributes_template", skip_serializing_if = "Option::is_none")]
    pub json_attributes_template: Option<String>,
    /// The MQTT topic subscribed to receive a JSON dictionary payload and then set as sensor attributes. Implies `force_update` of the current sensor state when a message is received on this topic.
    #[serde(rename = "json_attributes_topic", skip_serializing_if = "Option::is_none")]
    pub json_attributes_topic: Option<String>,
    /// Defines a [template](/docs/configuration/templating/#using-templates-with-the-mqtt-integration) to extract the last_reset. Available variables: `entity_id`. The `entity_id` can be used to reference the entity's attributes.
    #[serde(rename = "last_reset_value_template", skip_serializing_if = "Option::is_none")]
    pub last_reset_value_template: Option<String>,
    /// The name of the MQTT sensor. Can be set to `null` if only the device name is relevant. (Default: MQTT Sensor)
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Used instead of `name` for automatic generation of `entity_id`
    #[serde(rename = "object_id", skip_serializing_if = "Option::is_none")]
    pub object_id: Option<String>,
    /// The number of decimals which should be used in the sensor's state after rounding.
    #[serde(rename = "suggested_display_precision", skip_serializing_if = "Option::is_none")]
    pub suggested_display_precision: Option<String>,
    /// The maximum QoS level to be used when receiving and publishing messages.
    #[serde(rename = "qos", skip_serializing_if = "Option::is_none")]
    pub qos: Option<String>,
    /// The [state_class](https://developers.home-assistant.io/docs/core/entity/sensor#available-state-classes) of the sensor. (Default: None)
    #[serde(rename = "state_class", skip_serializing_if = "Option::is_none")]
    pub state_class: Option<String>,
    /// The MQTT topic subscribed to receive sensor values. If `device_class`, `state_class`, `unit_of_measurement` or `suggested_display_precision` is set, and a numeric value is expected, an empty value `''` will be ignored and will not update the state, a `'null'` value will set the sensor to an `unknown` state. The `device_class` can be `null`. (Default: None)
    #[serde(rename = "state_topic")]
    pub state_topic: String,
    /// An ID that uniquely identifies this sensor. If two sensors have the same unique ID, Home Assistant will raise an exception.
    #[serde(rename = "unique_id", skip_serializing_if = "Option::is_none")]
    pub unique_id: Option<String>,
    /// Defines the units of measurement of the sensor, if any. The `unit_of_measurement` can be `null`. (Default: None)
    #[serde(rename = "unit_of_measurement", skip_serializing_if = "Option::is_none")]
    pub unit_of_measurement: Option<String>,
    /// Defines a [template](/docs/configuration/templating/#using-templates-with-the-mqtt-integration) to extract the value. If the template throws an error, the current state will be used instead.
    #[serde(rename = "value_template", skip_serializing_if = "Option::is_none")]
    pub value_template: Option<String>,
}

impl Sensor {
    pub fn new(state_topic: String) -> Sensor {
        Sensor {
            device: None,
            device_class: None,
            enabled_by_default: None,
            encoding: None,
            entity_category: None,
            expire_after: None,
            force_update: None,
            json_attributes_template: None,
            json_attributes_topic: None,
            last_reset_value_template: None,
            name: None,
            object_id: None,
            suggested_display_precision: None,
            qos: None,
            state_class: None,
            state_topic,
            unique_id: None,
            unit_of_measurement: None,
            value_template: None,
        }
    }
}


