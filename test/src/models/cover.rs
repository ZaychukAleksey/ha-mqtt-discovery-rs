/*
 * Data structures for Home Assistant MQTT discovery
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Cover {
    /// A list of MQTT topics subscribed to receive availability (online/offline) updates. Must not be used together with `availability_topic`.
    #[serde(rename = "availability", skip_serializing_if = "Option::is_none")]
    pub availability: Option<Vec<crate::models::AlarmControlPanelAvailabilityInner>>,
    /// When `availability` is configured, this controls the conditions needed to set the entity to `available`. Valid entries are `all`, `any`, and `latest`. If set to `all`, `payload_available` must be received on all configured availability topics before the entity is marked as online. If set to `any`, `payload_available` must be received on at least one configured availability topic before the entity is marked as online. If set to `latest`, the last `payload_available` or `payload_not_available` received on any configured availability topic controls the availability. (Default: `latest)`
    #[serde(rename = "availability_mode", skip_serializing_if = "Option::is_none")]
    pub availability_mode: Option<String>,
    /// Defines a [template](/docs/configuration/templating/#using-templates-with-the-mqtt-integration) to extract device's availability from the `availability_topic`. To determine the devices's availability result of this template will be compared to `payload_available` and `payload_not_available`.
    #[serde(rename = "availability_template", skip_serializing_if = "Option::is_none")]
    pub availability_template: Option<String>,
    /// The MQTT topic subscribed to to receive birth and LWT messages from the MQTT cover device. If an `availability` topic is not defined, the cover availability state will always be `available`. If an `availability` topic is defined, the cover availability state will be `unavailable` by default. Must not be used together with `availability`.
    #[serde(rename = "availability_topic", skip_serializing_if = "Option::is_none")]
    pub availability_topic: Option<String>,
    /// The MQTT topic to publish commands to control the cover.
    #[serde(rename = "command_topic", skip_serializing_if = "Option::is_none")]
    pub command_topic: Option<String>,
    #[serde(rename = "device", skip_serializing_if = "Option::is_none")]
    pub device: Option<Box<crate::models::CameraDevice>>,
    /// Sets the [class of the device](/integrations/cover/), changing the device state and icon that is displayed on the frontend. The `device_class` can be `null`. (Default: `None)`
    #[serde(rename = "device_class", skip_serializing_if = "Option::is_none")]
    pub device_class: Option<String>,
    /// Flag which defines if the entity should be enabled when first added. (Default: `true)`
    #[serde(rename = "enabled_by_default", skip_serializing_if = "Option::is_none")]
    pub enabled_by_default: Option<bool>,
    /// The encoding of the payloads received and published messages. Set to `\"\"` to disable decoding of incoming payload. (Default: `utf-8)`
    #[serde(rename = "encoding", skip_serializing_if = "Option::is_none")]
    pub encoding: Option<String>,
    /// The [category](https://developers.home-assistant.io/docs/core/entity#generic-properties) of the entity. (Default: `None)`
    #[serde(rename = "entity_category", skip_serializing_if = "Option::is_none")]
    pub entity_category: Option<String>,
    /// Defines a [template](/docs/configuration/templating/#using-templates-with-the-mqtt-integration) to extract the JSON dictionary from messages received on the `json_attributes_topic`. Usage example can be found in [MQTT sensor](/integrations/sensor.mqtt/#json-attributes-template-configuration) documentation.
    #[serde(rename = "json_attributes_template", skip_serializing_if = "Option::is_none")]
    pub json_attributes_template: Option<String>,
    /// The MQTT topic subscribed to receive a JSON dictionary payload and then set as sensor attributes. Usage example can be found in [MQTT sensor](/integrations/sensor.mqtt/#json-attributes-topic-configuration) documentation.
    #[serde(rename = "json_attributes_topic", skip_serializing_if = "Option::is_none")]
    pub json_attributes_topic: Option<String>,
    /// The name of the cover. Can be set to `null` if only the device name is relevant. (Default: `MQTT Cover)`
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Used instead of `name` for automatic generation of `entity_id`
    #[serde(rename = "object_id", skip_serializing_if = "Option::is_none")]
    pub object_id: Option<String>,
    /// Flag that defines if switch works in optimistic mode. (Default: ``false` if state or position topic defined, else `true`.)`
    #[serde(rename = "optimistic", skip_serializing_if = "Option::is_none")]
    pub optimistic: Option<bool>,
    /// The payload that represents the online state. (Default: `online)`
    #[serde(rename = "payload_available", skip_serializing_if = "Option::is_none")]
    pub payload_available: Option<String>,
    /// The command payload that closes the cover. (Default: `CLOSE)`
    #[serde(rename = "payload_close", skip_serializing_if = "Option::is_none")]
    pub payload_close: Option<String>,
    /// The payload that represents the offline state. (Default: `offline)`
    #[serde(rename = "payload_not_available", skip_serializing_if = "Option::is_none")]
    pub payload_not_available: Option<String>,
    /// The command payload that opens the cover. (Default: `OPEN)`
    #[serde(rename = "payload_open", skip_serializing_if = "Option::is_none")]
    pub payload_open: Option<String>,
    /// The command payload that stops the cover. (Default: `STOP)`
    #[serde(rename = "payload_stop", skip_serializing_if = "Option::is_none")]
    pub payload_stop: Option<String>,
    /// Number which represents closed position.
    #[serde(rename = "position_closed", skip_serializing_if = "Option::is_none")]
    pub position_closed: Option<i32>,
    /// Number which represents open position. (Default: `100)`
    #[serde(rename = "position_open", skip_serializing_if = "Option::is_none")]
    pub position_open: Option<i32>,
    /// Defines a [template](/docs/configuration/templating/#using-templates-with-the-mqtt-integration) that can be used to extract the payload for the `position_topic` topic. Within the template the following variables are available: `entity_id`, `position_open`; `position_closed`; `tilt_min`; `tilt_max`. The `entity_id` can be used to reference the entity's attributes with help of the [states](/docs/configuration/templating/#states) template function;
    #[serde(rename = "position_template", skip_serializing_if = "Option::is_none")]
    pub position_template: Option<String>,
    /// The MQTT topic subscribed to receive cover position messages.
    #[serde(rename = "position_topic", skip_serializing_if = "Option::is_none")]
    pub position_topic: Option<String>,
    /// The maximum QoS level to be used when receiving and publishing messages.
    #[serde(rename = "qos", skip_serializing_if = "Option::is_none")]
    pub qos: Option<i32>,
    /// Defines if published messages should have the retain flag set.
    #[serde(rename = "retain", skip_serializing_if = "Option::is_none")]
    pub retain: Option<bool>,
    /// Defines a [template](/docs/configuration/templating/#using-templates-with-the-mqtt-integration) to define the position to be sent to the `set_position_topic` topic. Incoming position value is available for use in the template `{% raw %}{{ position }}{% endraw %}`. Within the template the following variables are available: `entity_id`, `position`, the target position in percent; `position_open`; `position_closed`; `tilt_min`; `tilt_max`. The `entity_id` can be used to reference the entity's attributes with help of the [states](/docs/configuration/templating/#states) template function;
    #[serde(rename = "set_position_template", skip_serializing_if = "Option::is_none")]
    pub set_position_template: Option<String>,
    /// The MQTT topic to publish position commands to. You need to set position_topic as well if you want to use position topic. Use template if position topic wants different values than within range `position_closed` - `position_open`. If template is not defined and `position_closed != 100` and `position_open != 0` then proper position value is calculated from percentage position.
    #[serde(rename = "set_position_topic", skip_serializing_if = "Option::is_none")]
    pub set_position_topic: Option<String>,
    /// The payload that represents the closed state. (Default: `closed)`
    #[serde(rename = "state_closed", skip_serializing_if = "Option::is_none")]
    pub state_closed: Option<String>,
    /// The payload that represents the closing state. (Default: `closing)`
    #[serde(rename = "state_closing", skip_serializing_if = "Option::is_none")]
    pub state_closing: Option<String>,
    /// The payload that represents the open state. (Default: `open)`
    #[serde(rename = "state_open", skip_serializing_if = "Option::is_none")]
    pub state_open: Option<String>,
    /// The payload that represents the opening state. (Default: `opening)`
    #[serde(rename = "state_opening", skip_serializing_if = "Option::is_none")]
    pub state_opening: Option<String>,
    /// The payload that represents the stopped state (for covers that do not report `open`/`closed` state). (Default: `stopped)`
    #[serde(rename = "state_stopped", skip_serializing_if = "Option::is_none")]
    pub state_stopped: Option<String>,
    /// The MQTT topic subscribed to receive cover state messages. State topic can only read (`open`, `opening`, `closed`, `closing` or `stopped`) state.
    #[serde(rename = "state_topic", skip_serializing_if = "Option::is_none")]
    pub state_topic: Option<String>,
    /// The value that will be sent on a `close_cover_tilt` command.
    #[serde(rename = "tilt_closed_value", skip_serializing_if = "Option::is_none")]
    pub tilt_closed_value: Option<i32>,
    /// Defines a [template](/docs/configuration/templating/#using-templates-with-the-mqtt-integration) that can be used to extract the payload for the `tilt_command_topic` topic. Within the template the following variables are available: `entity_id`, `tilt_position`, the target tilt position in percent; `position_open`; `position_closed`; `tilt_min`; `tilt_max`. The `entity_id` can be used to reference the entity's attributes with help of the [states](/docs/configuration/templating/#states) template function;
    #[serde(rename = "tilt_command_template", skip_serializing_if = "Option::is_none")]
    pub tilt_command_template: Option<String>,
    /// The MQTT topic to publish commands to control the cover tilt.
    #[serde(rename = "tilt_command_topic", skip_serializing_if = "Option::is_none")]
    pub tilt_command_topic: Option<String>,
    /// The maximum tilt value. (Default: `100)`
    #[serde(rename = "tilt_max", skip_serializing_if = "Option::is_none")]
    pub tilt_max: Option<i32>,
    /// The minimum tilt value.
    #[serde(rename = "tilt_min", skip_serializing_if = "Option::is_none")]
    pub tilt_min: Option<i32>,
    /// The value that will be sent on an `open_cover_tilt` command. (Default: `100)`
    #[serde(rename = "tilt_opened_value", skip_serializing_if = "Option::is_none")]
    pub tilt_opened_value: Option<i32>,
    /// Flag that determines if tilt works in optimistic mode. (Default: ``true` if `tilt_status_topic` is not defined, else `false`)`
    #[serde(rename = "tilt_optimistic", skip_serializing_if = "Option::is_none")]
    pub tilt_optimistic: Option<bool>,
    /// Defines a [template](/docs/configuration/templating/#using-templates-with-the-mqtt-integration) that can be used to extract the payload for the `tilt_status_topic` topic. Within the template the following variables are available: `entity_id`, `position_open`; `position_closed`; `tilt_min`; `tilt_max`. The `entity_id` can be used to reference the entity's attributes with help of the [states](/docs/configuration/templating/#states) template function;
    #[serde(rename = "tilt_status_template", skip_serializing_if = "Option::is_none")]
    pub tilt_status_template: Option<String>,
    /// The MQTT topic subscribed to receive tilt status update values.
    #[serde(rename = "tilt_status_topic", skip_serializing_if = "Option::is_none")]
    pub tilt_status_topic: Option<String>,
    /// An ID that uniquely identifies this cover. If two covers have the same unique ID, Home Assistant will raise an exception.
    #[serde(rename = "unique_id", skip_serializing_if = "Option::is_none")]
    pub unique_id: Option<String>,
    /// Defines a [template](/docs/configuration/templating/#using-templates-with-the-mqtt-integration) that can be used to extract the payload for the `state_topic` topic.
    #[serde(rename = "value_template", skip_serializing_if = "Option::is_none")]
    pub value_template: Option<String>,
}

impl Cover {
    pub fn new() -> Cover {
        Cover {
            availability: None,
            availability_mode: None,
            availability_template: None,
            availability_topic: None,
            command_topic: None,
            device: None,
            device_class: None,
            enabled_by_default: None,
            encoding: None,
            entity_category: None,
            json_attributes_template: None,
            json_attributes_topic: None,
            name: None,
            object_id: None,
            optimistic: None,
            payload_available: None,
            payload_close: None,
            payload_not_available: None,
            payload_open: None,
            payload_stop: None,
            position_closed: None,
            position_open: None,
            position_template: None,
            position_topic: None,
            qos: None,
            retain: None,
            set_position_template: None,
            set_position_topic: None,
            state_closed: None,
            state_closing: None,
            state_open: None,
            state_opening: None,
            state_stopped: None,
            state_topic: None,
            tilt_closed_value: None,
            tilt_command_template: None,
            tilt_command_topic: None,
            tilt_max: None,
            tilt_min: None,
            tilt_opened_value: None,
            tilt_optimistic: None,
            tilt_status_template: None,
            tilt_status_topic: None,
            unique_id: None,
            value_template: None,
        }
    }
}


