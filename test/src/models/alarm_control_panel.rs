/*
 * Data structures for Home Assistant MQTT discovery
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AlarmControlPanel {
    /// A list of MQTT topics subscribed to receive availability (online/offline) updates. Must not be used together with `availability_topic`.
    #[serde(rename = "availability", skip_serializing_if = "Option::is_none")]
    pub availability: Option<Vec<crate::models::AlarmControlPanelAvailabilityInner>>,
    /// When `availability` is configured, this controls the conditions needed to set the entity to `available`. Valid entries are `all`, `any`, and `latest`. If set to `all`, `payload_available` must be received on all configured availability topics before the entity is marked as online. If set to `any`, `payload_available` must be received on at least one configured availability topic before the entity is marked as online. If set to `latest`, the last `payload_available` or `payload_not_available` received on any configured availability topic controls the availability. (Default: `latest)`
    #[serde(rename = "availability_mode", skip_serializing_if = "Option::is_none")]
    pub availability_mode: Option<String>,
    /// Defines a [template](/docs/configuration/templating/#using-templates-with-the-mqtt-integration) to extract device's availability from the `availability_topic`. To determine the devices's availability result of this template will be compared to `payload_available` and `payload_not_available`.
    #[serde(rename = "availability_template", skip_serializing_if = "Option::is_none")]
    pub availability_template: Option<String>,
    /// The MQTT topic subscribed to receive availability (online/offline) updates. Must not be used together with `availability`.
    #[serde(rename = "availability_topic", skip_serializing_if = "Option::is_none")]
    pub availability_topic: Option<String>,
    /// If defined, specifies a code to enable or disable the alarm in the frontend. Note that the code is validated locally and blocks sending MQTT messages to the remote device. For remote code validation, the code can be configured to either of the special values `REMOTE_CODE` (numeric code) or `REMOTE_CODE_TEXT` (text code). In this case, local code validation is bypassed but the frontend will still show a numeric or text code dialog. Use `command_template` to send the code to the remote device. Example configurations for remote code validation [can be found here](#configurations-with-remote-code-validation).
    #[serde(rename = "code", skip_serializing_if = "Option::is_none")]
    pub code: Option<String>,
    /// If true the code is required to arm the alarm. If false the code is not validated. (Default: `true)`
    #[serde(rename = "code_arm_required", skip_serializing_if = "Option::is_none")]
    pub code_arm_required: Option<bool>,
    /// If true the code is required to disarm the alarm. If false the code is not validated. (Default: `true)`
    #[serde(rename = "code_disarm_required", skip_serializing_if = "Option::is_none")]
    pub code_disarm_required: Option<bool>,
    /// If true the code is required to trigger the alarm. If false the code is not validated. (Default: `true)`
    #[serde(rename = "code_trigger_required", skip_serializing_if = "Option::is_none")]
    pub code_trigger_required: Option<bool>,
    /// The [template](/docs/configuration/templating/#using-templates-with-the-mqtt-integration) used for the command payload. Available variables: `action` and `code`. (Default: `action)`
    #[serde(rename = "command_template", skip_serializing_if = "Option::is_none")]
    pub command_template: Option<String>,
    /// The MQTT topic to publish commands to change the alarm state.
    #[serde(rename = "command_topic")]
    pub command_topic: String,
    #[serde(rename = "device", skip_serializing_if = "Option::is_none")]
    pub device: Option<Box<crate::models::AlarmControlPanelDevice>>,
    /// Flag which defines if the entity should be enabled when first added. (Default: `true)`
    #[serde(rename = "enabled_by_default", skip_serializing_if = "Option::is_none")]
    pub enabled_by_default: Option<bool>,
    /// The encoding of the payloads received and published messages. Set to `\"\"` to disable decoding of incoming payload. (Default: `utf-8)`
    #[serde(rename = "encoding", skip_serializing_if = "Option::is_none")]
    pub encoding: Option<String>,
    /// The [category](https://developers.home-assistant.io/docs/core/entity#generic-properties) of the entity. (Default: `None)`
    #[serde(rename = "entity_category", skip_serializing_if = "Option::is_none")]
    pub entity_category: Option<String>,
    /// Defines a [template](/docs/configuration/templating/#using-templates-with-the-mqtt-integration) to extract the JSON dictionary from messages received on the `json_attributes_topic`. Usage example can be found in [MQTT sensor](/integrations/sensor.mqtt/#json-attributes-template-configuration) documentation.
    #[serde(rename = "json_attributes_template", skip_serializing_if = "Option::is_none")]
    pub json_attributes_template: Option<String>,
    /// The MQTT topic subscribed to receive a JSON dictionary payload and then set as sensor attributes. Usage example can be found in [MQTT sensor](/integrations/sensor.mqtt/#json-attributes-topic-configuration) documentation.
    #[serde(rename = "json_attributes_topic", skip_serializing_if = "Option::is_none")]
    pub json_attributes_topic: Option<String>,
    /// The name of the alarm. Can be set to `null` if only the device name is relevant. (Default: `MQTT Alarm)`
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Used instead of `name` for automatic generation of `entity_id`
    #[serde(rename = "object_id", skip_serializing_if = "Option::is_none")]
    pub object_id: Option<String>,
    /// The payload to set armed-away mode on your Alarm Panel. (Default: `ARM_AWAY)`
    #[serde(rename = "payload_arm_away", skip_serializing_if = "Option::is_none")]
    pub payload_arm_away: Option<String>,
    /// The payload to set armed-home mode on your Alarm Panel. (Default: `ARM_HOME)`
    #[serde(rename = "payload_arm_home", skip_serializing_if = "Option::is_none")]
    pub payload_arm_home: Option<String>,
    /// The payload to set armed-night mode on your Alarm Panel. (Default: `ARM_NIGHT)`
    #[serde(rename = "payload_arm_night", skip_serializing_if = "Option::is_none")]
    pub payload_arm_night: Option<String>,
    /// The payload to set armed-vacation mode on your Alarm Panel. (Default: `ARM_VACATION)`
    #[serde(rename = "payload_arm_vacation", skip_serializing_if = "Option::is_none")]
    pub payload_arm_vacation: Option<String>,
    /// The payload to set armed-custom-bypass mode on your Alarm Panel. (Default: `ARM_CUSTOM_BYPASS)`
    #[serde(rename = "payload_arm_custom_bypass", skip_serializing_if = "Option::is_none")]
    pub payload_arm_custom_bypass: Option<String>,
    /// The payload that represents the available state. (Default: `online)`
    #[serde(rename = "payload_available", skip_serializing_if = "Option::is_none")]
    pub payload_available: Option<String>,
    /// The payload to disarm your Alarm Panel. (Default: `DISARM)`
    #[serde(rename = "payload_disarm", skip_serializing_if = "Option::is_none")]
    pub payload_disarm: Option<String>,
    /// The payload that represents the unavailable state. (Default: `offline)`
    #[serde(rename = "payload_not_available", skip_serializing_if = "Option::is_none")]
    pub payload_not_available: Option<String>,
    /// The payload to trigger the alarm on your Alarm Panel. (Default: `TRIGGER)`
    #[serde(rename = "payload_trigger", skip_serializing_if = "Option::is_none")]
    pub payload_trigger: Option<String>,
    /// The maximum QoS level to be used when receiving and publishing messages.
    #[serde(rename = "qos", skip_serializing_if = "Option::is_none")]
    pub qos: Option<i32>,
    /// If the published message should have the retain flag on or not.
    #[serde(rename = "retain", skip_serializing_if = "Option::is_none")]
    pub retain: Option<bool>,
    /// The MQTT topic subscribed to receive state updates.
    #[serde(rename = "state_topic")]
    pub state_topic: String,
    /// A list of features that the alarm control panel supports. The available list options are `arm_home`, `arm_away`, `arm_night`, `arm_vacation`, `arm_custom_bypass`, and `trigger`. (Default: `arm_home,arm_away,arm_night,arm_vacation,arm_custom_bypass,trigger)`
    #[serde(rename = "supported_features", skip_serializing_if = "Option::is_none")]
    pub supported_features: Option<Vec<String>>,
    /// An ID that uniquely identifies this alarm panel. If two alarm panels have the same unique ID, Home Assistant will raise an exception.
    #[serde(rename = "unique_id", skip_serializing_if = "Option::is_none")]
    pub unique_id: Option<String>,
    /// Defines a [template](/docs/configuration/templating/#using-templates-with-the-mqtt-integration) to extract the value.
    #[serde(rename = "value_template", skip_serializing_if = "Option::is_none")]
    pub value_template: Option<String>,
}

impl AlarmControlPanel {
    pub fn new(command_topic: String, state_topic: String) -> AlarmControlPanel {
        AlarmControlPanel {
            availability: None,
            availability_mode: None,
            availability_template: None,
            availability_topic: None,
            code: None,
            code_arm_required: None,
            code_disarm_required: None,
            code_trigger_required: None,
            command_template: None,
            command_topic,
            device: None,
            enabled_by_default: None,
            encoding: None,
            entity_category: None,
            json_attributes_template: None,
            json_attributes_topic: None,
            name: None,
            object_id: None,
            payload_arm_away: None,
            payload_arm_home: None,
            payload_arm_night: None,
            payload_arm_vacation: None,
            payload_arm_custom_bypass: None,
            payload_available: None,
            payload_disarm: None,
            payload_not_available: None,
            payload_trigger: None,
            qos: None,
            retain: None,
            state_topic,
            supported_features: None,
            unique_id: None,
            value_template: None,
        }
    }
}


