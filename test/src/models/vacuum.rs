/*
 * Data structures for Home Assistant MQTT discovery
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Vacuum {
    /// A list of MQTT topics subscribed to receive availability (online/offline) updates. Must not be used together with `availability_topic`.
    #[serde(rename = "availability", skip_serializing_if = "Option::is_none")]
    pub availability: Option<Vec<crate::models::AlarmControlPanelAvailabilityInner>>,
    /// When `availability` is configured, this controls the conditions needed to set the entity to `available`. Valid entries are `all`, `any`, and `latest`. If set to `all`, `payload_available` must be received on all configured availability topics before the entity is marked as online. If set to `any`, `payload_available` must be received on at least one configured availability topic before the entity is marked as online. If set to `latest`, the last `payload_available` or `payload_not_available` received on any configured availability topic controls the availability. (Default: `latest)`
    #[serde(rename = "availability_mode", skip_serializing_if = "Option::is_none")]
    pub availability_mode: Option<String>,
    /// Defines a [template](/docs/configuration/templating/#using-templates-with-the-mqtt-integration) to extract device's availability from the `availability_topic`. To determine the devices's availability result of this template will be compared to `payload_available` and `payload_not_available`.
    #[serde(rename = "availability_template", skip_serializing_if = "Option::is_none")]
    pub availability_template: Option<String>,
    /// The MQTT topic subscribed to receive availability (online/offline) updates. Must not be used together with `availability`.
    #[serde(rename = "availability_topic", skip_serializing_if = "Option::is_none")]
    pub availability_topic: Option<String>,
    /// The MQTT topic to publish commands to control the vacuum.
    #[serde(rename = "command_topic", skip_serializing_if = "Option::is_none")]
    pub command_topic: Option<String>,
    #[serde(rename = "device", skip_serializing_if = "Option::is_none")]
    pub device: Option<Box<crate::models::ButtonDevice>>,
    /// The encoding of the payloads received and published messages. Set to `\"\"` to disable decoding of incoming payload. (Default: `utf-8)`
    #[serde(rename = "encoding", skip_serializing_if = "Option::is_none")]
    pub encoding: Option<String>,
    #[serde(rename = "fan_speed_list", skip_serializing_if = "Option::is_none")]
    pub fan_speed_list: Option<Box<crate::models::ButtonDeviceIdentifiers>>,
    /// Defines a [template](/docs/configuration/templating/#using-templates-with-the-mqtt-integration) to extract the JSON dictionary from messages received on the `json_attributes_topic`. Usage example can be found in [MQTT sensor](/integrations/sensor.mqtt/#json-attributes-template-configuration) documentation.
    #[serde(rename = "json_attributes_template", skip_serializing_if = "Option::is_none")]
    pub json_attributes_template: Option<String>,
    /// The MQTT topic subscribed to receive a JSON dictionary payload and then set as sensor attributes. Usage example can be found in [MQTT sensor](/integrations/sensor.mqtt/#json-attributes-topic-configuration) documentation.
    #[serde(rename = "json_attributes_topic", skip_serializing_if = "Option::is_none")]
    pub json_attributes_topic: Option<String>,
    /// The name of the vacuum. Can be set to `null` if only the device name is relevant. (Default: `MQTT Vacuum)`
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Used instead of `name` for automatic generation of `entity_id`
    #[serde(rename = "object_id", skip_serializing_if = "Option::is_none")]
    pub object_id: Option<String>,
    /// The payload that represents the available state. (Default: `online)`
    #[serde(rename = "payload_available", skip_serializing_if = "Option::is_none")]
    pub payload_available: Option<String>,
    /// The payload to send to the `command_topic` to begin a spot cleaning cycle. (Default: `clean_spot)`
    #[serde(rename = "payload_clean_spot", skip_serializing_if = "Option::is_none")]
    pub payload_clean_spot: Option<String>,
    /// The payload to send to the `command_topic` to locate the vacuum (typically plays a song). (Default: `locate)`
    #[serde(rename = "payload_locate", skip_serializing_if = "Option::is_none")]
    pub payload_locate: Option<String>,
    /// The payload that represents the unavailable state. (Default: `offline)`
    #[serde(rename = "payload_not_available", skip_serializing_if = "Option::is_none")]
    pub payload_not_available: Option<String>,
    /// The payload to send to the `command_topic` to pause the vacuum. (Default: `pause)`
    #[serde(rename = "payload_pause", skip_serializing_if = "Option::is_none")]
    pub payload_pause: Option<String>,
    /// The payload to send to the `command_topic` to tell the vacuum to return to base. (Default: `return_to_base)`
    #[serde(rename = "payload_return_to_base", skip_serializing_if = "Option::is_none")]
    pub payload_return_to_base: Option<String>,
    /// The payload to send to the `command_topic` to begin the cleaning cycle. (Default: `start)`
    #[serde(rename = "payload_start", skip_serializing_if = "Option::is_none")]
    pub payload_start: Option<String>,
    /// The payload to send to the `command_topic` to stop cleaning. (Default: `stop)`
    #[serde(rename = "payload_stop", skip_serializing_if = "Option::is_none")]
    pub payload_stop: Option<String>,
    /// The maximum QoS level to be used when receiving and publishing messages.
    #[serde(rename = "qos", skip_serializing_if = "Option::is_none")]
    pub qos: Option<i32>,
    /// If the published message should have the retain flag on or not.
    #[serde(rename = "retain", skip_serializing_if = "Option::is_none")]
    pub retain: Option<bool>,
    /// The schema to use. Must be `state`. (Default: `legacy)`
    #[serde(rename = "schema", skip_serializing_if = "Option::is_none")]
    pub schema: Option<String>,
    /// The MQTT topic to publish custom commands to the vacuum.
    #[serde(rename = "send_command_topic", skip_serializing_if = "Option::is_none")]
    pub send_command_topic: Option<String>,
    /// The MQTT topic to publish commands to control the vacuum's fan speed.
    #[serde(rename = "set_fan_speed_topic", skip_serializing_if = "Option::is_none")]
    pub set_fan_speed_topic: Option<String>,
    /// The MQTT topic subscribed to receive state messages from the vacuum. Messages received on the `state_topic` must be a valid JSON dictionary, with a mandatory `state` key and optionally `battery_level` and `fan_speed` keys as shown in the [example](#state-mqtt-protocol).
    #[serde(rename = "state_topic", skip_serializing_if = "Option::is_none")]
    pub state_topic: Option<String>,
    #[serde(rename = "supported_features", skip_serializing_if = "Option::is_none")]
    pub supported_features: Option<Box<crate::models::ButtonDeviceIdentifiers>>,
    /// An ID that uniquely identifies this vacuum. If two vacuums have the same unique ID, Home Assistant will raise an exception.
    #[serde(rename = "unique_id", skip_serializing_if = "Option::is_none")]
    pub unique_id: Option<String>,
}

impl Vacuum {
    pub fn new() -> Vacuum {
        Vacuum {
            availability: None,
            availability_mode: None,
            availability_template: None,
            availability_topic: None,
            command_topic: None,
            device: None,
            encoding: None,
            fan_speed_list: None,
            json_attributes_template: None,
            json_attributes_topic: None,
            name: None,
            object_id: None,
            payload_available: None,
            payload_clean_spot: None,
            payload_locate: None,
            payload_not_available: None,
            payload_pause: None,
            payload_return_to_base: None,
            payload_start: None,
            payload_stop: None,
            qos: None,
            retain: None,
            schema: None,
            send_command_topic: None,
            set_fan_speed_topic: None,
            state_topic: None,
            supported_features: None,
            unique_id: None,
        }
    }
}


